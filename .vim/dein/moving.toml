[[plugins]] # ctrlp 超有能ファイル検索
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
  let g:ctrlp_use_migemo = 1
  let g:ctrlp_clear_cache_on_exit = 0   " 終了時キャッシュをクリアしない
  let g:ctrlp_mruf_max            = 500 " MRUの最大記録数
  let g:ctrlp_open_new_file       = 1   " 新規ファイル作成時にタブで開く

  function! CtrlPMark()
    if expand('%:t') =~ 'ControlP' && has_key(g:lightline, 'ctrlp_item')
      call lightline#link('iR'[g:lightline.ctrlp_regex])
      return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
            \ , g:lightline.ctrlp_next], 0)
    else
      return ''
    endif
  endfunction

  let g:ctrlp_status_func = {
    \ 'main': 'CtrlPStatusFunc_1',
    \ 'prog': 'CtrlPStatusFunc_2',
    \ }

  function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
    let g:lightline.ctrlp_regex = a:regex
    let g:lightline.ctrlp_prev = a:prev
    let g:lightline.ctrlp_item = a:item
    let g:lightline.ctrlp_next = a:next
    return lightline#statusline(0)
  endfunction

  function! CtrlPStatusFunc_2(str)
    return lightline#statusline(0)
  endfunction

  if executable('ag')
    let g:ctrlp_use_caching=0
  let g:ctrlp_user_command='ag %s -i --nocolor --nogroup -g ""'
  endif

  function! CtrlPMark()
    if expand('%:t') =~ 'ControlP' && has_key(g:lightline, 'ctrlp_item')
      call lightline#link('iR'[g:lightline.ctrlp_regex])
      return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
            \ , g:lightline.ctrlp_next], 0)
    else
      return ''
    endif
  endfunction

  let g:ctrlp_status_func = {
    \ 'main': 'CtrlPStatusFunc_1',
    \ 'prog': 'CtrlPStatusFunc_2',
    \ }

  function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
    let g:lightline.ctrlp_regex = a:regex
    let g:lightline.ctrlp_prev = a:prev
    let g:lightline.ctrlp_item = a:item
    let g:lightline.ctrlp_next = a:next
    return lightline#statusline(0)
  endfunction

  function! CtrlPStatusFunc_2(str)
    return lightline#statusline(0)
  endfunction

  let g:unite_force_overwrite_statusline = 0
  let g:vimfiler_force_overwrite_statusline = 0
  let g:vimshell_force_overwrite_statusline = 0
'''

[[plugins]] # ctrlpで使用
repo = 'rking/ag.vim'

[[plugins]] # easy_motion カーソル移動
repo = 'Lokaltog/vim-easymotion'

[[plugins]] # タグジャンプ
repo = 'szw/vim-tags'

[[plugins]] # タグジャンプ
repo = 'soramugi/auto-ctags.vim'

[[plugins]] # オートタグジャンプ (要設定: http://soramugi.hateblo.jp/entry/2013/12/01/150433)
repo = 'alpaca-tc/alpaca_tags'
hook_add = '''
  let g:auto_ctags = 1
  let g:auto_ctags_directory_list = ['.git']
  let g:auto_ctags_filetype_mode = 1
'''

[[plugins]] # easy_motion カーソル移動
repo = 'alpaca-tc/alpaca_tags'
hook_add = '''
  augroup AlpacaTags
    autocmd!
    if exists(':Tags')
      autocmd BufWritePost Gemfile TagsBundle
      autocmd BufEnter * TagsSet
      " 毎回保存と同時更新する場合はコメントを外す
      autocmd BufWritePost * TagsUpdate
    endif
  augroup END
'''

[[plugins]] # easy_motion カーソル移動
repo = 'Lokaltog/vim-easymotion'

[[plugins]] # j, kによる移動を早くする
repo = 'rhysd/accelerated-jk'
hook_add = '''
  nmap j <Plug>(accelerated_jk_gj)
  nmap k <Plug>(accelerated_jk_gk)
'''
